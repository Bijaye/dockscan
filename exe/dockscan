#!/usr/bin/env ruby
require 'logger'
require 'optparse'

# add script dir to load path 
$:.unshift File.dirname(__FILE__)

# main thing
# require 'scan/manage-scan'
require 'dockscan'

$PRGNAME='dockscan'

# helpful class for logger
class MultiDelegator
  def initialize(*targets)
    @targets = targets
  end

  def self.delegate(*methods)
    methods.each do |m|
      define_method(m) do |*args|
	@targets.map { |t| t.send(m, *args) }
      end
    end
    self
  end

  class <<self
    alias to new
  end
end

# default $options
$options = {}
$options['loglevel'] = 'WARN'
$options['logname'] = nil

begin
	optyaml = YAML::load_file(ENV['HOME']+'/.dockscan')
rescue # Errno::ENOENT
end

if optyaml != nil then
	$options.merge!(optyaml)
end

# initialize logger
if $options['logname'] != nil then
	log_file = File.open($options['logname'], 'a')
	@log = Logger.new MultiDelegator.delegate(:write, :close).to(STDERR, log_file)
else
	@log = Logger.new MultiDelegator.delegate(:write, :close).to(STDERR)
end
loglevel =  Logger.const_get $options['loglevel'] # Logger::INFO # default is ::WARN
@log.level = loglevel

# pp $options

OptionParser.new do |opts|
	opts.banner = "Usage: #{$PRGNAME} [options]"

	opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
		$options['verbose'] = v
		@log.level = Logger::INFO
	end

	opts.on("-d", "--[no-]debug", "Run in debug mode") do |v|
		$options['debug'] = v
		@log.level = Logger::DEBUG
	end

	opts.on("-h", "--help", "Prints this help") do
		puts opts
		exit
	end

	opts.on("-o", "--output NAME", "use NAME for output filename") do |optarg|
		$options['output'] = optarg
	end

	opts.on("-r", "--report NAME", "use NAME for report format") do |optarg|
		$options['report'] = optarg
	end

	opts.on("-l", "--log FILE", "log to FILE") do |optarg|
		$options['logname'] = optarg
	end

	opts.separator ""
	opts.separator "Example #1: #{$PRGNAME} -r html -o myreport -v tcp://example.com:5422"
	opts.separator "Example #2: #{$PRGNAME} unix:///var/run/docker.sock"
end.parse!

# pp $options

# start scan
if ARGV.empty? 
	Dockscan::Scan::Manage.new.scan(nil, $options, @log)
else
	ARGV.each do |url|
		Dockscan::Scan::Manage.new.scan(url, $options, @log)
	end
end



